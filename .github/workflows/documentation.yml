name: Documentation

on:
  workflow_run:
    workflows: [ "Portfolio CI" ]
    types: [ completed ]
    branches: [ master ]

permissions:
  contents: write
  pages: write
  actions: read
  checks: read

env:
  APP_PORT: '9090'

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'

    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ github.event.workflow_run.head_repository.full_name }}
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      # Create target directory
      - name: Create target directory
        run: mkdir -p backend/target

      # Download JAR artifact
      - name: Download JAR
        uses: actions/download-artifact@v3
        with:
          name: backend-jar
          path: backend/target
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      # Download other build files
      - name: Download build files
        uses: actions/download-artifact@v3
        with:
          name: backend-files
          path: backend/target
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Debug artifacts
        run: |
          echo "Workflow run ID: ${{ github.event.workflow_run.id }}"
          echo "Repository: ${{ github.event.workflow_run.head_repository.full_name }}"
          echo "Branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Listing target directory:"
          ls -la backend/target/

      - name: Install netcat
        run: sudo apt-get install -y netcat-openbsd

      - name: Make Maven Wrapper executable
        working-directory: ./backend
        run: chmod +x mvnw

      - name: Create key.properties
        working-directory: ./backend/src/main/resources
        run: |
          mkdir -p $(dirname key.properties)
          cat > key.properties << EOF
          jwt.secret=${{ secrets.JWT_SECRET }}
          spring.datasource.url=${{ secrets.DB_URL }}
          spring.datasource.username=${{ secrets.DB_USERNAME }}
          spring.datasource.password=${{ secrets.DB_PASSWORD }}
          server.port=${{ env.APP_PORT }}
          EOF

      - name: Start Application
        run: |
          echo "Starting application..."
          cd backend
          JAR_FILE=$(find target -name "*.jar" -type f | head -n 1)
          if [ -z "$JAR_FILE" ]; then
            echo "No JAR file found!"
            exit 1
          fi
          echo "Found JAR file: $JAR_FILE"
          nohup java -jar "$JAR_FILE" > app.log 2>&1 &
          echo "Waiting for application to start..."
          timeout 60 bash -c 'while ! nc -z localhost ${{ env.APP_PORT }}; do sleep 2; done'
          echo "Application started successfully"
          cat app.log

      - name: Generate OpenAPI Documentation
        working-directory: ./backend
        run: |
          sleep 15
          ./mvnw springdoc-openapi:generate \
            -Dspringdoc.api-docs.path=http://localhost:${{ env.APP_PORT }}/v3/api-docs \
            -Dspringdoc.swagger-ui.path=/swagger-ui.html

      - name: Deploy API Documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./backend/target/swagger-ui
          destination_dir: docs
          commit_message: "docs: update API documentation"

      - name: Upload Documentation Artifact
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: api-documentation
          path: backend/target/swagger-ui
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          pkill -f 'java -jar' || true
          echo "Application stopped"