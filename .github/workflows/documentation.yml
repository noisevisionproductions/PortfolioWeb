name: Documentation

on:
  workflow_run:
    workflows: [ "Portfolio CI" ]
    types: [ completed ]
    branches: [ master ]

permissions:
  contents: write
  pages: write
  id-token: write
  actions: read
  checks: read

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '21'
  APP_PORT: '9090'

jobs:
  generate-docs:
    runs-on: ubuntu-24.04
    if: |
      github.event.workflow_run.conclusion == 'success' || 
      github.event.workflow_run.conclusion == 'failure'

    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ github.event.workflow_run.head_repository.full_name }}
          ref: ${{ github.event.workflow_run.head_branch }}
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Download artifacts from Portfolio CI
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: "Portfolio CI"
          run_id: ${{ github.event.workflow_run.id }}
          name: app-state
          path: backend/target

      - name: Verify artifacts
        run: |
          if [ ! -d "backend/target" ]; then
            echo "Target directory not found!"
            exit 1
          fi
          JAR_COUNT=$(find backend/target -name "*.jar" -type f | wc -l)
          if [ "$JAR_COUNT" -eq 0 ]; then
            echo "No JAR files found in target directory!"
            exit 1
          fi
          echo "Found $JAR_COUNT JAR file(s)"

      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y netcat-openbsd curl

      - name: Make Maven Wrapper executable
        working-directory: ./backend
        run: |
          chmod +x mvnw
          ls -la mvnw

      - name: Create application properties
        working-directory: ./backend
        run: |
          mkdir -p target/classes
          cat > target/classes/application-docs.properties << EOF
          server.port=${{ env.APP_PORT }}
          spring.profiles.active=docs

          # Database Configuration
          spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
          spring.datasource.username=sa
          spring.datasource.password=password
          spring.datasource.driver-class-name=org.h2.Driver
          
          # JPA Configuration
          spring.jpa.hibernate.ddl-auto=create-drop
          spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
          
          # Redis Configuration
          spring.redis.host=localhost
          spring.redis.port=6379
          
          # Security Configuration
          application.security.jwt.secret-key=${{ secrets.JWT_SECRET || 'testsecretkey123456789012345678901234567890' }}
          application.security.jwt.expiration=86400000
          application.security.jwt.refresh-token.expiration=604800000
          
          # Documentation Configuration
          springdoc.swagger-ui.path=/swagger-ui.html
          springdoc.api-docs.path=/v3/api-docs
          spring.main.allow-bean-definition-overriding=true
          EOF

      - name: Start Application
        working-directory: ./backend
        run: |
          echo "Starting application..."
          JAR_FILE=$(find target -name "*.jar" -type f | head -n 1)
          echo "Using JAR file: $JAR_FILE"
          nohup java -jar "$JAR_FILE" \
            --spring.profiles.active=docs \
            --spring.config.additional-location=file:target/classes/application-docs.properties \
            > app.log 2>&1 &
          
          echo "Checking config file..."
          ls -la target/classes/application-docs.properties
          cat target/classes/application-docs.properties
          
          echo "Waiting for application to start (max 60 seconds)..."
          for i in {1..30}; do
            if nc -z localhost ${{ env.APP_PORT }}; then
              echo "Application started successfully"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Application failed to start within timeout"
              cat app.log
              exit 1
            fi
            sleep 2
          done

      - name: Verify API availability
        run: |
          echo "Verifying API docs endpoint..."
          for i in {1..5}; do
            if curl -s -f "http://localhost:${{ env.APP_PORT }}/v3/api-docs" > /dev/null; then
              echo "API documentation endpoint is accessible"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "API documentation endpoint is not accessible"
              cat backend/app.log
              exit 1
            fi
            sleep 3
          done

      - name: Generate OpenAPI Documentation
        working-directory: ./backend
        run: |
          ./mvnw springdoc-openapi:generate \
            -Dspringdoc.api-docs.path=http://localhost:${{ env.APP_PORT }}/v3/api-docs \
            -Dspringdoc.swagger-ui.path=/swagger-ui.html \
            -Dspringdoc.outputFileName=openapi.json \
            -Dspringdoc.outputDir=target/swagger-ui

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Generate static documentation
        working-directory: ./backend/target/swagger-ui
        run: |
          cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html>
            <head>
              <title>API Documentation</title>
              <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css" />
              <script src="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js"></script>
            </head>
            <body>
              <div id="swagger-ui"></div>
              <script>
                window.onload = () => {
                  SwaggerUIBundle({
                    url: "openapi.json",
                    dom_id: '#swagger-ui',
                    deepLinking: true,
                    presets: [
                      SwaggerUIBundle.presets.apis,
                      SwaggerUIBundle.SwaggerUIStandalonePreset
                    ],
                  });
                };
              </script>
            </body>
          </html>
          EOF

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: backend/target/swagger-ui

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Documentation Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-documentation
          path: backend/target/swagger-ui
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          pkill -f 'java -jar' || true
          echo "Application stopped"