name: Portfolio CI

on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master ]

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '21'
  APP_PORT: '9090'
  MIN_COVERAGE: '80'
  APP_STARTUP_TIMEOUT: '180'

permissions:
  contents: read
  actions: write
  checks: write
  pull-requests: write
  issues: write

jobs:
  frontend-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Node.js configuration
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            frontend/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Dependency installation
        working-directory: ./frontend
        run: npm ci

      - name: Run tests with coverage
        working-directory: ./frontend
        run: npm run test:coverage

      - name: Check coverage threshold
        working-directory: ./frontend
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
          if (( $(echo "$COVERAGE < ${{ env.MIN_COVERAGE }}" | bc -l) )); then
            echo "Code coverage ($COVERAGE%) is below minimum threshold (${{ env.MIN_COVERAGE }}%)"
            exit 1
          fi

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage-${{ github.sha }}
          path: frontend/coverage/
          retention-days: 7

  backend-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Java configuration
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Make Maven wrapper executable
        working-directory: ./backend
        run: chmod +x mvnw

      - name: Run tests with coverage
        working-directory: ./backend
        run: ./mvnw clean verify

      - name: Check coverage threshold
        working-directory: ./backend
        run: |
          COVERAGE=$(cat target/site/jacoco/index.html | grep -o 'Total[^%]*' | awk '{print $2}')
          if (( $(echo "$COVERAGE < ${{ env.MIN_COVERAGE }}" | bc -l) )); then
            echo "Code coverage ($COVERAGE%) is below minimum threshold (${{ env.MIN_COVERAGE }}%)"
            exit 1
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: backend-test-results-${{ github.sha }}
          path: |
            backend/target/surefire-reports/
            backend/target/site/jacoco/
          retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Portfolio'
          path: '.'
          format: 'HTML'

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report-${{ github.sha }}
          path: reports
          retention-days: 7

  build:
    needs: [ frontend-tests, backend-tests, security-scan ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Node.js configuration
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Build frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: Java configuration
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Build backend
        working-directory: ./backend
        run: ./mvnw clean package -DskipTests

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            frontend/dist
            backend/target/*.jar
          retention-days: 7

  prepare-backend:
    needs: [ build ]
    runs-on: ubuntu-latest
    outputs:
      app_status: ${{ steps.start_app.outputs.status }}

    steps:
      - uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts-${{ github.sha }}

      - name: Install required packages
        run: sudo apt-get install -y netcat-openbsd

      - name: Create key.properties
        working-directory: ./backend/src/main/resources
        run: |
          mkdir -p $(dirname key.properties)
          cat > key.properties << EOF
          jwt.secret=${{ secrets.JWT_SECRET }}
          jwt.expiration=${{ secrets.JWT_EXPIRATION }}
          spring.datasource.url=${{ secrets.DB_URL }}
          spring.datasource.username=${{ secrets.DB_USERNAME }}
          spring.datasource.password=${{ secrets.DB_PASSWORD }}
          spring.redis.host=${{ secrets.REDIS_HOST }}
          spring.redis.port=${{ secrets.REDIS_PORT }}
          server.port=${{ env.APP_PORT }}
          EOF

      - name: Start Spring Boot Application
        id: start_app
        working-directory: ./backend
        run: |
          nohup java -jar target/*.jar --server.port=${{ env.APP_PORT }} &
          echo "Waiting for application to start..."
          if timeout ${{ env.APP_STARTUP_TIMEOUT }} bash -c 'while ! nc -z localhost ${{ env.APP_PORT }}; do sleep 2; done'; then
            echo "status=running" >> $GITHUB_OUTPUT
            echo "Application started successfully"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "Failed to start application"
            exit 1
          fi

      - name: Notify Slack on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  create-release:
    needs: [ prepare-backend ]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts-${{ github.sha }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            frontend/dist/**
            backend/target/*.jar
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup-backend:
    if: always()
    needs: [ prepare-backend ]
    runs-on: ubuntu-latest

    steps:
      - name: Stop Spring Boot Application
        run: |
          pkill -f '.jar' || true
          echo "Application stopped"

      - name: Cleanup files
        run: |
          rm -f ./backend/src/main/resources/key.properties