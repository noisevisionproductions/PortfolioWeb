name: Portfolio CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read
  actions: read
  checks: write

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '21'
  APP_PORT: '9090'

jobs:
  frontend-tests:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v3

      - name: Node.js configuration
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Dependency installation
        working-directory: ./frontend
        run: npm ci

      - name: Run tests with coverage
        working-directory: ./frontend
        run: npm run test:coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: frontend/coverage/
          retention-days: 7

  backend-tests:
    runs-on: ubuntu-24.04

    env:
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: my_website_db
      DB_USER: postgres
      DB_PASSWORD: postgres
      SERVER_PORT: 8080
      SPRING_DATASOURCE_URL: "jdbc:postgresql://localhost:5432/my_website_db"

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: my_website_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Java configuration
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Setup test configuration
        working-directory: ./backend
        run: |
          # Create test resources directory
          mkdir -p src/test/resources

          # Create main application-test.properties
          cat > src/test/resources/application-test.properties << EOF
          spring.datasource.driver-class-name=org.postgresql.Driver
          spring.datasource.url=${SPRING_DATASOURCE_URL}
          spring.datasource.username=${DB_USER}
          spring.datasource.password=${DB_PASSWORD}
          spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
          spring.jpa.hibernate.ddl-auto=create-drop
          spring.redis.host=localhost
          spring.redis.port=6379
          jwt.secret.key=${JWT_SECRET_KEY}
          EOF

          # Also create in main resources to ensure it's found
          mkdir -p src/main/resources
          cp src/test/resources/application-test.properties src/main/resources/

          # Create basic application.properties
          cat > src/main/resources/application.properties << EOF
          spring.profiles.active=test
          EOF

      - name: Make Maven wrapper executable
        working-directory: ./backend
        run: |
          chmod +x mvnw
          ls -la mvnw  # Verify permissions

      - name: Run tests
        working-directory: ./backend
        env:
          SPRING_PROFILES_ACTIVE: test
        run: |
          chmod +x mvnw
          ./mvnw test \
            -Dspring.profiles.active=test \
            -Dspring.config.location=classpath:/application.properties,classpath:/application-test.properties

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: backend/test-output/
          retention-days: 7

  build:
    needs: [ frontend-tests, backend-tests ]
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v3

      - name: Node.js configuration
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Build frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

  prepare-backend:
    needs: [ build ]
    runs-on: ubuntu-24.04

    permissions:
      contents: read
      actions: write

    outputs:
      app_status: ${{ steps.start_app.outputs.status }}

    steps:
      - uses: actions/checkout@v3

      - name: Java configuration
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Make Maven Wrapper executable
        run: |
          chmod +x backend/mvnw
          ls -la backend/mvnw

      - name: Install required packages
        run: sudo apt-get install -y netcat-openbsd

      - name: Create key.properties
        working-directory: ./backend/src/main/resources
        run: |
          mkdir -p $(dirname key.properties)
          cat > key.properties << EOF
          jwt.secret=${{ secrets.JWT_SECRET }}
          jwt.expiration=${{ secrets.JWT_EXPIRATION }}
          spring.datasource.url=${{ secrets.DB_URL }}
          spring.datasource.username=${{ secrets.DB_USERNAME }}
          spring.datasource.password=${{ secrets.DB_PASSWORD }}
          spring.redis.host=${{ secrets.REDIS_HOST }}
          spring.redis.port=${{ secrets.REDIS_PORT }}
          server.port=${{ env.APP_PORT }}
          EOF

      - name: Build Application
        working-directory: ./backend
        run: |
          chmod +x mvnw
          ./mvnw clean package -DskipTests

      - name: Upload build JAR
        uses: actions/upload-artifact@v3
        with:
          name: app-state
          path: |
            backend/target/*.jar
            backend/target/classes/
            backend/target/generated-sources/
          retention-days: 2

  cleanup-backend:
    if: always()
    needs: [ prepare-backend ]
    runs-on: ubuntu-24.04

    steps:
      - name: Stop Spring Boot Application
        run: |
          pkill -f 'spring-boot:run' || true
          echo "Application stopped"

      - name: Cleanup files
        run: |
          rm -f ./backend/src/main/resources/key.properties