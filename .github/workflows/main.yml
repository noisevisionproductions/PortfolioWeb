name: Portfolio CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read
  actions: read
  checks: write

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '21'
  APP_PORT: '9090'

jobs:
  frontend-tests:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v3

      - name: Node.js configuration
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Dependency installation
        working-directory: ./frontend
        run: npm ci

      - name: Run tests with coverage
        working-directory: ./frontend
        run: npm run test:coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: frontend/coverage/
          retention-days: 7

  backend-tests:
    runs-on: ubuntu-24.04

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      SPRING_PROFILES_ACTIVE: test
      PG_URL: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
      PG_USERNAME: sa
      PG_PASSWORD: password
      JWT_SECRET_KEY: testsecretkey123456789012345678901234567890
      FILE_UPLOAD_DIR: ./uploads-test

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Create test configuration
        run: |
          mkdir -p backend/src/test/resources
          mkdir -p backend/uploads-test

          # Create main test config
          cat << EOF > backend/src/test/resources/application.yml
          spring:
            profiles:
              active: test
          EOF

          # Create test profile config
          cat << EOF > backend/src/test/resources/application-test.yml
          spring:
            application:
              name: portfolio-backend
            datasource:
              url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
              username: sa
              password: password
              driver-class-name: org.h2.Driver
            redis:
              host: localhost
              port: 6379
              database: 0
              timeout: 60000
            jpa:
              hibernate:
                ddl-auto: create-drop
              show-sql: true
              database-platform: org.hibernate.dialect.H2Dialect
            servlet:
              multipart:
                enabled: true
                file-size-threshold: 2KB
                max-file-size: 10MB
                max-request-size: 10MB

          file:
            upload-dir: ./uploads-test

          application:
            security:
              jwt:
                secret-key: \${JWT_SECRET_KEY}
                expiration: 86400000
                refresh-token:
                  expiration: 604800000
          EOF

          # Create .env for dotenv support
          cat << EOF > backend/.env
          PG_URL=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
          PG_USERNAME=sa
          PG_PASSWORD=password
          JWT_SECRET_KEY=testsecretkey123456789012345678901234567890
          EOF

      - name: Create empty key.properties
        run: touch backend/src/main/resources/key.properties

      - name: Run tests
        working-directory: ./backend
        run: mvn test -Dspring.profiles.active=test -X

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: backend-test-results
          path: |
            backend/target/surefire-reports/
            backend/target/site/
          retention-days: 7

  build:
    needs: [ frontend-tests, backend-tests ]
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v3

      - name: Node.js configuration
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Build frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

  prepare-backend:
    needs: [ build ]
    runs-on: ubuntu-24.04

    permissions:
      contents: read
      actions: write

    outputs:
      app_status: ${{ steps.start_app.outputs.status }}

    steps:
      - uses: actions/checkout@v3

      - name: Java configuration
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Make Maven Wrapper executable
        run: |
          chmod +x backend/mvnw
          ls -la backend/mvnw

      - name: Install required packages
        run: sudo apt-get install -y netcat-openbsd

      - name: Create key.properties
        working-directory: ./backend/src/main/resources
        run: |
          mkdir -p $(dirname key.properties)
          cat > key.properties << EOF
          jwt.secret=${{ secrets.JWT_SECRET }}
          jwt.expiration=${{ secrets.JWT_EXPIRATION }}
          spring.datasource.url=${{ secrets.DB_URL }}
          spring.datasource.username=${{ secrets.DB_USERNAME }}
          spring.datasource.password=${{ secrets.DB_PASSWORD }}
          spring.redis.host=${{ secrets.REDIS_HOST }}
          spring.redis.port=${{ secrets.REDIS_PORT }}
          server.port=${{ env.APP_PORT }}
          EOF

      - name: Build Application
        working-directory: ./backend
        run: |
          chmod +x mvnw
          ./mvnw clean package -DskipTests

      - name: Upload build JAR
        uses: actions/upload-artifact@v3
        with:
          name: app-state
          path: |
            backend/target/*.jar
            backend/target/classes/
            backend/target/generated-sources/
          retention-days: 2

  cleanup-backend:
    if: always()
    needs: [ prepare-backend ]
    runs-on: ubuntu-24.04

    steps:
      - name: Stop Spring Boot Application
        run: |
          pkill -f 'spring-boot:run' || true
          echo "Application stopped"

      - name: Cleanup files
        run: |
          rm -f ./backend/src/main/resources/key.properties