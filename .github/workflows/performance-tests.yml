name: Performance Tests

on:
  workflow_run:
    workflows: [ "Portfolio CI" ]
    types: [ completed ]
    branches: [ master ]

env:
  APP_PORT: '9090'

permissions:
  actions: read

jobs:
  performance-tests:

    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.conclusion == 'success' || 
      github.event.workflow_run.conclusion == 'failure'

    steps:
      - uses: actions/checkout@v3

      - name: Create necessary directories
        run: |
          mkdir -p backend/target
          mkdir -p jmeter-results

      - name: Download application state
        uses: dawidd6/action-download-artifact@v2
        continue-on-error: true
        with:
          name: app-state
          workflow: Portfolio CI
          path: backend/target/
          workflow_conclusion: success
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify application files
        run: |
          if [ ! -d "backend/target" ] || [ -z "$(ls -A backend/target)" ]; then
          echo "Warning: Application files not found or directory is empty"
          exit 1
          fi 

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget unzip netcat-openbsd

      - name: Setup JMeter
        run: |
          mkdir -p jmeter
          cd jmeter
          wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.2.tgz || \
          wget https://downloads.apache.org/jmeter/binaries/apache-jmeter-5.6.2.tgz || \
          curl -L -O https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.2.tgz
          
          if [ ! -f apache-jmeter-5.6.2.tgz ]; then
            echo "Failed to download JMeter"
            exit 1
          fi
          
          tar -xzf apache-jmeter-5.6.2.tgz
          echo "JMETER_HOME=$PWD/apache-jmeter-5.6.2" >> $GITHUB_ENV
          echo "$PWD/apache-jmeter-5.6.2/bin" >> $GITHUB_PATH

      - name: Verify JMeter Installation
        run: jmeter --version

      - name: Wait for Application
        run: |
          echo "Waiting for application to be available..."
          timeout 60 bash -c 'while ! nc -z localhost ${{ env.APP_PORT }}; do sleep 2; done'

      - name: Create results directory
        run: mkdir -p jmeter-results

      - name: Run JMeter Tests
        run: |
          if [ ! -f "backend/src/test/jmeter/test-plan.jmx" ]; then
            echo "Test plan file not found!"
            exit 1
          fi
          
          jmeter -n \
            -t backend/src/test/jmeter/test-plan.jmx \
            -l jmeter-results/results.jtl \
            -j jmeter-results/jmeter.log \
            -e -o jmeter-results/dashboard \
            -Jhost=localhost \
            -Jport=${{ env.APP_PORT }} \
            -Jprotocol=http \
            -Jthreads=10 \
            -Jrampup=10 \
            -Jduration=60

      - name: Generate Report Summary
        if: always()
        run: |
          echo "Performance Test Summary" > jmeter-results/summary.txt
          echo "========================" >> jmeter-results/summary.txt
          echo "Test Duration: 60 seconds" >> jmeter-results/summary.txt
          echo "Number of Threads: 10" >> jmeter-results/summary.txt
          if [ -f "jmeter-results/results.jtl" ]; then
            echo "Test Results:" >> jmeter-results/summary.txt
            awk -F',' '
              NR>1 {
                total++; 
                if($4>=400) errors++
              } 
              END {
                print "Total Requests: " total;
                print "Error Rate: " (errors/total)*100 "%"
              }' jmeter-results/results.jtl >> jmeter-results/summary.txt
          fi

      - name: Upload Performance Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: jmeter-results
          path: |
            jmeter-results/
            jmeter-results/dashboard/
            jmeter-results/jmeter.log
            jmeter-results/summary.txt

      - name: Check Test Results
        if: always()
        run: |
          if [ -f "jmeter-results/results.jtl" ]; then
            error_count=$(awk -F',' 'NR>1 && $4>=400 {err++} END {print err}' jmeter-results/results.jtl)
            total_count=$(awk -F',' 'NR>1 {total++} END {print total}' jmeter-results/results.jtl)
            if [ $error_count -gt 0 ]; then
              echo "Performance tests failed with $error_count errors out of $total_count requests"
              exit 1
            fi
          else
            echo "No test results found"
            exit 1
          fi