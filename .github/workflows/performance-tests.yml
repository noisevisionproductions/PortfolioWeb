name: Performance Tests

on:
  workflow_run:
    workflows: [ "Portfolio CI" ]
    types: [ completed ]
    branches: [ master ]

jobs:
  performance-tests:
    runs-on: ubuntu-24.04
    if: |
      github.event.workflow_run.conclusion == 'success' || 
      github.event.workflow_run.conclusion == 'failure'

    env:
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: portfolio
      DB_USER: postgres
      DB_PASSWORD: postgres
      SERVER_PORT: 8080
      SPRING_DATASOURCE_URL: "jdbc:postgresql://localhost:5432/portfolio"

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: portfolio
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget unzip netcat-openbsd

      - name: Make Maven Wrapper executable
        working-directory: ./backend
        run: |
          chmod +x mvnw
          ls -la mvnw

      - name: Build Application
        working-directory: ./backend
        run: |
          if ! ./mvnw clean package -DskipTests; then
            echo "Maven build failed"
            exit 1
          fi

      - name: Create key.properties for CI/CD
        working-directory: ./backend/src/main/resources
        run: |
          cat > key.properties << EOF
          jwt.secret.key=${JWT_SECRET_KEY}
          spring.datasource.url=${SPRING_DATASOURCE_URL}
          spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
          spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
          server.port=${SERVER_PORT}
          EOF

      - name: Start Spring Boot Application
        working-directory: ./backend
        run: |
          nohup ./mvnw spring-boot:run \
            -Dspring-boot.run.profiles=dev \
            -Dspring.config.location=classpath:/key.properties \
            -Dspring-boot.run.jvmArguments="\
            -Djwt.secret.key=${JWT_SECRET_KEY} \
            -Dspring.datasource.url=jdbc:postgresql://localhost:5432/portfolio \
            -Dspring.datasource.username=${DB_USER} \
            -Dspring.datasource.password=${DB_PASSWORD} \
            -Dspring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect \
            -Dspring.jpa.hibernate.ddl-auto=create-drop" &
          
          echo "Waiting for application to start..."
          timeout 60 bash -c 'while ! nc -z localhost ${SERVER_PORT}; do sleep 2; done'
          echo "Application started"

      - name: Setup JMeter
        run: |
          mkdir -p jmeter
          cd jmeter
          wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.2.tgz || \
          wget https://downloads.apache.org/jmeter/binaries/apache-jmeter-5.6.2.tgz || \
          curl -L -O https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.2.tgz
          
          if [ ! -f apache-jmeter-5.6.2.tgz ]; then
            echo "Failed to download JMeter"
            exit 1
          fi
          
          tar -xzf apache-jmeter-5.6.2.tgz
          echo "JMETER_HOME=$PWD/apache-jmeter-5.6.2" >> $GITHUB_ENV
          echo "$PWD/apache-jmeter-5.6.2/bin" >> $GITHUB_PATH

      - name: Verify JMeter Installation
        run: jmeter --version

      - name: Create results directory
        run: mkdir -p jmeter-results

      - name: Run JMeter Tests
        run: |
          if [ ! -f "backend/src/test/jmeter/test-plan.jmx" ]; then
            echo "Test plan file not found!"
            exit 1
          fi
          
          jmeter -n \
            -t backend/src/test/jmeter/test-plan.jmx \
            -l jmeter-results/results.jtl \
            -e -o jmeter-results/dashboard

      - name: Stop Spring Boot Application
        if: always()
        run: |
          kill $(lsof -t -i:8080) || true
          echo "Application stopped"

      - name: Upload Performance Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: jmeter-results
          path: jmeter-results/